openapi: 3.0.1
info:
  title: Patronus Device Manager Api
  version: 1.0.0
servers:
  - url: http://localhost:8080
    description: Local development instance
paths:
  /user:
    get:
      tags:
        - User
      operationId: getUsers
      summary: Get Users
      description: Query the registered users. Allows filtering on user properties.
      parameters:
        - name: hasDevice
          in: query
          required: false
          description: Filter users by whether they have a device assigned to them
          schema:
            type: boolean
            default: null
      responses:
        '200':
          description: List of users
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetUser'
    post:
      tags:
        - User
      operationId: createUser
      summary: Create a user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostUser'
        required: true
      responses:
        '200':
          description: User created successfully
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GetUser'
  /device:
    get:
      tags:
        - Device
      summary: Get devices
      operationId: getDevices
      responses:
        '200':
          description: List of registered devices
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetDevice'
    post:
      tags:
        - Device
      operationId: registerDevice
      summary: Register a device
      requestBody:
        description: Device being registered
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostDevice'
        required: true
      responses:
        '200':
          description: Newly registered device
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GetDevice'

        '409':
          description: Device already registered with provided ID.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /device/{deviceId}/{userId}:
    post:
      tags:
        - Device
      operationId: assignDeviceToUser
      summary: Assign device to user
      parameters:
        - name: deviceId
          description: UUID id of device being assigned
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: userId
          description: UUID id of the user to which the device is being assigned
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
        '404':
          description: User or device not found.
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /health:
    get:
      tags:
        - Health
      operationId: healthCheck
      summary: Service health check
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: string
components:
  schemas:
    Address:
      required:
        - addressLine1
        - city
        - country
        - postalCode
      type: object
      properties:
        addressLine1:
          type: string
          example: 49 Featherstone Street
        addressLine2:
          type: string
          example: Flat 2
        postalCode:
          type: string
          example: EC1Y 8SY
        city:
          type: string
          example: London
        zoneCode:
          type: string
          example: London
        country:
          type: string
          example: EN
    PostUser:
      required:
        - address
        - birthday
        - firstName
        - lastName
      type: object
      properties:
        firstName:
          type: string
          example: Alex
        lastName:
          type: string
          example: Wenk
        address:
          $ref: '#/components/schemas/Address'
        birthday:
          type: string
          format: date
          example: 1995-11-10
    PostDevice:
      required:
        - id
        - model
        - phoneNumber
        - serialNumber
      type: object
      properties:
        id:
          description: Device internal ID
          type: string
          format: uuid
        serialNumber:
          type: string
          description: Manufacturer serial number of the device
          example: sn1234abc
        model:
          type: string
          description: Device model
          example: Samsung watch 4
        phoneNumber:
          type: string
          description: Device phone number
          example: '+447572249537'
    GetDevice:
      allOf:
        - $ref: '#/components/schemas/PostDevice'
        - properties:
            userId:
              description: Internal UUID of the user to which this device is assigned
              type: string
              format: uuid

    GetUser:
      allOf:
        - properties:
            id:
              description: User internal ID
              type: string
              format: uuid
            devices:
              type: array
              items:
                $ref: '#/components/schemas/GetDevice'
        - $ref: '#/components/schemas/PostUser'
    ErrorResponse:
      type: object
      properties:
        status:
          type: number
          description: HTTP Error code
        message:
          type: string
          description: Error message
